name: platform_cd_dev_workflow

on:
  workflow_call:
    inputs:
      env_name:
        type: string
        description: "Execution Environment"
        required: true
      use_case_base_path:
        type: string
        description: "The flow use-case to execute"
        required: true
      deployment_type:
        type: string
        description: "Determine type of deployment - aml, aks, docker, webapp"
        required: true
    secrets:
      azure_credentials:
        description: "service principal auth to Azure"
        required: true
      registry_details:
        description: "prompt flow registry details"
        required: false
      ENV_VARS:
        description: "prompt flow environment variables details"
        required: false
  workflow_dispatch:
    inputs:
      env_name:
        type: string
        description: "Execution Environment"
        required: true
        default: "dev"
      use_case_base_path:
        type: string
        description: "The flow use-case to execute"
        required: true
      deployment_type:
        type: string
        description: "Determine type of deployment - aml, aks, docker, webapp"
        required: true

jobs:
  flow-deployment:
    name: prompt flow deployment job
    runs-on: ubuntu-latest
    environment:
      name: ${{ inputs.env_name }}
    env:
      RESOURCE_GROUP_NAME: ${{ vars.RESOURCE_GROUP_NAME }}
      WORKSPACE_NAME: ${{ vars.WORKSPACE_NAME }}
    steps:
      - name: Checkout Actions
        uses: actions/checkout@v4

      - name: Azure login
        uses: azure/login@v1
        with:
          creds: ${{ secrets.azure_credentials }}
          
      - name: Configure Azure ML Agent
        uses: ./.github/actions/configure_azureml_agent
        with:
          versionSpec: "3.9"
          base_path: ${{ inputs.use_case_base_path }}

      - name: Load secrets from ENV_VARS
        run: |
          set -e # fail on error
          IFS=$'\n' # Set internal field separator to new line
          for var in $(echo "${{ secrets.ENV_VARS }}"); do
            KEY=$(echo "$var" | cut -d '=' -f 1)
            VALUE=$(echo "$var" | cut -d '=' -f 2-)
            echo "::add-mask::$VALUE"
            echo "$KEY=$VALUE" >> $GITHUB_ENV
          done
        shell: bash

      - name: load the current Azure subscription details
        id: subscription_details
        shell: bash
        run: |
          export subscriptionId=$(az account show --query id -o tsv)
          echo "SUBSCRIPTION_ID=$subscriptionId" >> $GITHUB_OUTPUT

      #=====================================
      # Registers the flow in Azure ML registry
      # Writes latest model version to model_version.txt file.
      # model_version.txt file is read in next step
      #=====================================   
      - name: Register flow as model in AzureML
        uses: ./.github/actions/execute_script
        with:
          step_name: "Register flow as model in AzureML"
          script_parameter: |
            python -m llmops.common.deployment.register_model \
            --subscription_id ${{ steps.subscription_details.outputs.SUBSCRIPTION_ID }} \
            --base_path ${{ inputs.use_case_base_path }} \
            --output_file "model_version.txt" \
            --build_id ${{ github.run_id }} \
            --env_name ${{ inputs.env_name }} \

      #=====================================
      # Reads model_version.txt file. Assigns it to variable MODEL_VERSION
      # MODEL_VERSION Used in next step for deployment
      #=====================================   
      - name: Read registered flow latest version
        shell: bash
        run: |
          readarray arr <"model_version.txt"
          model_version=${arr[0]}
          echo $model_version
          echo "MODEL_VERSION=${model_version}"  >> "$GITHUB_ENV"

      #=====================================
      # Executes managed deployment when parameter deployment_type == 'aml'
      # Reads 'azure_managed_endpoint' field values from deployment_config.json
      #=====================================             
      - name: Deploy to Managed endpoint
        if: ${{ inputs.deployment_type == 'aml'  }}
        uses: ./.github/actions/aml_real_deployment
        with:
          SUBSCRIPTION_ID: ${{ steps.subscription_details.outputs.SUBSCRIPTION_ID }}
          use_case_base_path: ${{ inputs.use_case_base_path }}
          DEPLOY_ENVIRONMENT: ${{ inputs.env_name }}
          RESOURCE_GROUP_NAME: ${{ vars.RESOURCE_GROUP_NAME }}
          WORKSPACE_NAME: ${{ vars.WORKSPACE_NAME }}
          KEY_VAULT_NAME: ${{ vars.KEY_VAULT_NAME }}
          MODEL_VERSION: $MODEL_VERSION

      #=====================================
      # Executes Managed kubernetes deployment when parameter deployment_type == 'aks'
      # Reads 'kubernetes_endpoint' field values from deployment_config.json
      #=====================================     
      - name: Deploy to kubernetes real-time online endpoint
        if: ${{ inputs.deployment_type == 'aks'  }}  
        uses: ./.github/actions/kubernetes_deployment
        with:
          SUBSCRIPTION_ID: ${{ steps.subscription_details.outputs.SUBSCRIPTION_ID }}
          use_case_base_path: ${{ inputs.use_case_base_path }}
          DEPLOY_ENVIRONMENT: ${{ inputs.env_name }}
          RESOURCE_GROUP_NAME: ${{ vars.RESOURCE_GROUP_NAME }}
          WORKSPACE_NAME: ${{ vars.WORKSPACE_NAME }}
          KEY_VAULT_NAME: ${{ vars.KEY_VAULT_NAME }}
          MODEL_VERSION: $MODEL_VERSION

      #=====================================
      # Creates local pf connections when deployment type is webapp
      # Uses secret CONNECTION_DETAILS for creating connections
      #=====================================     
      - name: Create local PF Connections 
        if: ${{ inputs.deployment_type == 'webapp'  }}  
        uses: ./.github/actions/execute_script
        with:
          step_name: "Create local PF connections"
          script_parameter: |
            python -m llmops.common.prompt_local_connections \
              --env_name ${{ inputs.env_name }} \
              --base_path ${{ inputs.use_case_base_path }} \

        #=====================================
        # Executes Azure Webapp deployment when parameter 
        # deployment_type == 'webapp' using docker image
        # Reads 'webapp_endpoint' field values from deployment_config.json
        #=====================================     
      - name: Deploy to webapp
        if: ${{ inputs.deployment_type == 'webapp'  }}  
        uses: ./.github/actions/webapp_deployment
        with:
          USE_CASE_BASE_PATH: ${{ inputs.use_case_base_path }}
          DEPLOY_ENVIRONMENT: ${{ inputs.env_name }}
        env:
          REGISTRY_DETAILS: ${{ secrets.registry_details }}

        
            





            
